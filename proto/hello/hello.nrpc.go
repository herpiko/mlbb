// Code generated by protoc-gen-nrpc, DO NOT EDIT.
// source: proto/hello/hello.proto

package hello

import (
	"context"
	"log"
	"time"

	"github.com/ftamhar/nrpc"
	"github.com/nats-io/nats.go"
	"google.golang.org/protobuf/proto"
)

// HelloServicesServer is the interface that providers of the service
// HelloServices should implement.
type HelloServicesServer interface {
	Greeting(ctx context.Context, req *GreetingRequest) (resp *GreetingResponse, err error)
	Upload(ctx context.Context, req *UploadRequest) (resp *UploadResponse, err error)
	Upload2(ctx context.Context, req *UploadRequest) (resp *UploadResponse, err error)
}

// HelloServicesHandler provides a NATS subscription handler that can serve a
// subscription using a given HelloServicesServer implementation.
type HelloServicesHandler struct {
	ctx       context.Context
	workers   *nrpc.WorkerPool
	nc        nrpc.NatsConn
	server    HelloServicesServer
	encodings []string
}

func NewHelloServicesHandler(ctx context.Context, nc nrpc.NatsConn, s HelloServicesServer) *HelloServicesHandler {
	return &HelloServicesHandler{
		ctx:       ctx,
		nc:        nc,
		server:    s,
		encodings: []string{"protobuf"},
	}
}

func NewHelloServicesConcurrentHandler(workers *nrpc.WorkerPool, nc nrpc.NatsConn, s HelloServicesServer) *HelloServicesHandler {
	return &HelloServicesHandler{
		workers: workers,
		nc:      nc,
		server:  s,
	}
}

// SetEncodings sets the output encodings when using a '*Publish' function
func (h *HelloServicesHandler) SetEncodings(encodings []string) {
	h.encodings = encodings
}

func (h *HelloServicesHandler) Subject() string {
	return "HelloServices.>"
}

func (h *HelloServicesHandler) Handler(msg *nats.Msg) {
	var ctx context.Context
	if h.workers != nil {
		ctx = h.workers.Context
	} else {
		ctx = h.ctx
	}
	request := nrpc.NewRequest(ctx, h.nc, msg.Subject, msg.Reply)
	// extract method name & encoding from subject
	_, _, name, tail, err := nrpc.ParseSubject(
		"", 0, "HelloServices", 0, msg.Subject)
	if err != nil {
		log.Printf("HelloServicesHanlder: HelloServices subject parsing failed: %v", err)
		return
	}

	request.MethodName = name
	request.SubjectTail = tail

	// call handler and form response
	var immediateError *nrpc.Error
	switch name {
	case "Greeting":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("GreetingHanlder: Greeting subject parsing failed: %v", err)
			break
		}
		req := new(GreetingRequest)
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, req); err != nil {
			log.Printf("GreetingHandler: Greeting request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Greeting(ctx, req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Upload":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("UploadHanlder: Upload subject parsing failed: %v", err)
			break
		}
		req := new(UploadRequest)
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, req); err != nil {
			log.Printf("UploadHandler: Upload request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Upload(ctx, req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Upload2":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Upload2Hanlder: Upload2 subject parsing failed: %v", err)
			break
		}
		req := new(UploadRequest)
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, req); err != nil {
			log.Printf("Upload2Handler: Upload2 request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Upload2(ctx, req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	default:
		log.Printf("HelloServicesHandler: unknown name %q", name)
		immediateError = &nrpc.Error{
			Type:    nrpc.Error_CLIENT,
			Message: "unknown name: " + name,
		}
	}
	if immediateError == nil {
		if h.workers != nil {
			// Try queuing the request
			if err := h.workers.QueueRequest(request); err != nil {
				log.Printf("nrpc: Error queuing the request: %s", err)
			}
		} else {
			// Run the handler synchronously
			request.RunAndReply()
		}
	}

	if immediateError != nil {
		if err := request.SendReply(nil, immediateError); err != nil {
			log.Printf("HelloServicesHandler: HelloServices handler failed to publish the response: %s", err)
		}
	}
}

type HelloServicesClient struct {
	nc       nrpc.NatsConn
	Subject  string
	Encoding string
	Timeout  time.Duration
}

func NewHelloServicesClient(nc nrpc.NatsConn) *HelloServicesClient {
	return &HelloServicesClient{
		nc:       nc,
		Subject:  "HelloServices",
		Encoding: "protobuf",
		Timeout:  5 * time.Second,
	}
}

func (c *HelloServicesClient) Greeting(ctx context.Context, req *GreetingRequest) (resp *GreetingResponse, err error) {

	subject := c.Subject + "." + "Greeting"

	// call
	resp = new(GreetingResponse)
	err = nrpc.Call(ctx, req, resp, c.nc, subject, c.Encoding)
	if err != nil {
		return // already logged
	}

	return
}

func (c *HelloServicesClient) Upload(ctx context.Context, req *UploadRequest) (resp *UploadResponse, err error) {

	subject := c.Subject + "." + "Upload"

	// call
	resp = new(UploadResponse)
	err = nrpc.Call(ctx, req, resp, c.nc, subject, c.Encoding)
	if err != nil {
		return // already logged
	}

	return
}

func (c *HelloServicesClient) Upload2(ctx context.Context, req *UploadRequest) (resp *UploadResponse, err error) {

	subject := c.Subject + "." + "Upload2"

	// call
	resp = new(UploadResponse)
	err = nrpc.Call(ctx, req, resp, c.nc, subject, c.Encoding)
	if err != nil {
		return // already logged
	}

	return
}

type Client struct {
	nc              nrpc.NatsConn
	defaultEncoding string
	defaultTimeout  time.Duration
	HelloServices   *HelloServicesClient
}

func NewClient(nc nrpc.NatsConn) *Client {
	c := Client{
		nc:              nc,
		defaultEncoding: "protobuf",
		defaultTimeout:  5 * time.Second,
	}
	c.HelloServices = NewHelloServicesClient(nc)
	return &c
}

func (c *Client) SetEncoding(encoding string) {
	c.defaultEncoding = encoding
	if c.HelloServices != nil {
		c.HelloServices.Encoding = encoding
	}
}

func (c *Client) SetTimeout(t time.Duration) {
	c.defaultTimeout = t
	if c.HelloServices != nil {
		c.HelloServices.Timeout = t
	}
}
